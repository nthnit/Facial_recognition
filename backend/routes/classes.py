from fastapi import APIRouter, HTTPException, Depends
from sqlalchemy.orm import Session
from database import get_db
from models.class_model import Class
from models.user import User
from schemas.class_schema import ClassCreate, ClassUpdate, ClassResponse
from typing import List
import pandas as pd
from fastapi.responses import FileResponse
import os
from routes.user import get_current_user  # ‚úÖ Import x√°c th·ª±c user

router = APIRouter()

# üü¢ API L·∫§Y DANH S√ÅCH L·ªöP H·ªåC (Admin & Manager c√≥ quy·ªÅn)
@router.get("", response_model=List[ClassResponse])
def get_classes(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    if current_user.role not in ["admin", "manager"]:
        raise HTTPException(status_code=403, detail="B·∫°n kh√¥ng c√≥ quy·ªÅn xem danh s√°ch l·ªõp h·ªçc")

    classes = db.query(Class).all()
    return classes

# üü¢ API L·∫§Y CHI TI·∫æT L·ªöP H·ªåC THEO ID (Admin & Manager c√≥ quy·ªÅn)
@router.get("/{class_id}", response_model=ClassResponse)
def get_class_detail(
    class_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    if current_user.role not in ["admin", "manager"]:
        raise HTTPException(status_code=403, detail="B·∫°n kh√¥ng c√≥ quy·ªÅn xem chi ti·∫øt l·ªõp h·ªçc")

    class_obj = db.query(Class).filter(Class.id == class_id).first()
    if not class_obj:
        raise HTTPException(status_code=404, detail="L·ªõp h·ªçc kh√¥ng t·ªìn t·∫°i")
    
    return class_obj

# üü¢ API TH√äM M·ªöI L·ªöP H·ªåC (Admin & Manager c√≥ quy·ªÅn)
@router.post("", response_model=ClassResponse)
def create_class(
    class_data: ClassCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    if current_user.role not in ["admin", "manager"]:
        raise HTTPException(status_code=403, detail="B·∫°n kh√¥ng c√≥ quy·ªÅn th√™m l·ªõp h·ªçc")

    new_class = Class(
        name=class_data.name,
        teacher_id=class_data.teacher_id,
        start_date=class_data.start_date,
        end_date=class_data.end_date,
        total_sessions=class_data.total_sessions,
        subject=class_data.subject,
        status=class_data.status,
        class_code=class_data.class_code,
    )

    db.add(new_class)
    db.commit()
    db.refresh(new_class)
    return new_class

# üü¢ API C·∫¨P NH·∫¨T TH√îNG TIN L·ªöP H·ªåC (Admin & Manager c√≥ quy·ªÅn)
@router.put("/{class_id}", response_model=ClassResponse)
def update_class(
    class_id: int,
    class_data: ClassUpdate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    if current_user.role not in ["admin", "manager"]:
        raise HTTPException(status_code=403, detail="B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t th√¥ng tin l·ªõp h·ªçc")

    class_obj = db.query(Class).filter(Class.id == class_id).first()
    if not class_obj:
        raise HTTPException(status_code=404, detail="L·ªõp h·ªçc kh√¥ng t·ªìn t·∫°i")

    for key, value in class_data.dict(exclude_unset=True).items():
        setattr(class_obj, key, value)

    db.commit()
    db.refresh(class_obj)
    return class_obj

# üü¢ API XO√Å L·ªöP H·ªåC (Admin & Manager c√≥ quy·ªÅn)
@router.delete("/{class_id}")
def delete_class(
    class_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    if current_user.role not in ["admin", "manager"]:
        raise HTTPException(status_code=403, detail="B·∫°n kh√¥ng c√≥ quy·ªÅn xo√° l·ªõp h·ªçc")

    class_obj = db.query(Class).filter(Class.id == class_id).first()
    if not class_obj:
        raise HTTPException(status_code=404, detail="L·ªõp h·ªçc kh√¥ng t·ªìn t·∫°i")

    db.delete(class_obj)
    db.commit()
    return {"detail": "L·ªõp h·ªçc ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng"}

# üü¢ API XU·∫§T DANH S√ÅCH L·ªöP RA FILE EXCEL (Admin & Manager c√≥ quy·ªÅn)
@router.get("/export")
def export_classes_to_excel(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    if current_user.role not in ["admin", "manager"]:
        raise HTTPException(status_code=403, detail="B·∫°n kh√¥ng c√≥ quy·ªÅn xu·∫•t danh s√°ch l·ªõp h·ªçc")

    classes = db.query(Class).all()
    if not classes:
        raise HTTPException(status_code=404, detail="Kh√¥ng c√≥ l·ªõp h·ªçc n√†o ƒë·ªÉ xu·∫•t")

    data = [{
        "M√£ l·ªõp": cls.class_code,
        "T√™n l·ªõp": cls.name,
        "Gi·∫£ng vi√™n": cls.teacher_id,
        "Ng√†y b·∫Øt ƒë·∫ßu": cls.start_date.strftime("%Y-%m-%d"),
        "Ng√†y k·∫øt th√∫c": cls.end_date.strftime("%Y-%m-%d"),
        "S·ªë bu·ªïi h·ªçc": cls.total_sessions,
        "M√¥n h·ªçc": cls.subject,
        "Tr·∫°ng th√°i": cls.status
    } for cls in classes]

    df = pd.DataFrame(data)
    file_path = "class_list.xlsx"
    df.to_excel(file_path, index=False)

    return FileResponse(
        file_path, 
        filename="DanhSachLop.xlsx", 
        media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )
