from fastapi import APIRouter, HTTPException, Depends
from sqlalchemy.orm import Session
from database import get_db
from models.attendance_model import Attendance
from models.class_students_model import ClassStudent
from models.class_model import Class
from models.student_model import Student
from schemas.attendance_schema import AttendanceCreate, AttendanceResponse
from typing import List
from routes.user import get_current_user

router = APIRouter()

# üü¢ **1. API: L·∫•y danh s√°ch ƒëi·ªÉm danh c·ªßa m·ªôt bu·ªïi h·ªçc**
@router.get("/sessions/{session_id}/attendance", response_model=List[AttendanceResponse])
def get_attendance_by_session(
    session_id: int,
    db: Session = Depends(get_db),
    current_user=Depends(get_current_user)
):
    if current_user.role not in ["admin", "teacher"]:
        raise HTTPException(status_code=403, detail="B·∫°n kh√¥ng c√≥ quy·ªÅn xem ƒëi·ªÉm danh.")

    attendance_records = db.query(Attendance).filter(Attendance.session_id == session_id).all()
    return attendance_records


# üü¢ **2. API: C·∫≠p nh·∫≠t ƒëi·ªÉm danh cho m·ªôt bu·ªïi h·ªçc**
@router.post("/sessions/{session_id}/attendance")
def update_attendance(
    session_id: int,
    attendance_data: List[AttendanceCreate],
    db: Session = Depends(get_db),
    current_user=Depends(get_current_user)
):
    if current_user.role not in ["admin", "teacher"]:
        raise HTTPException(status_code=403, detail="B·∫°n kh√¥ng c√≥ quy·ªÅn c·∫≠p nh·∫≠t ƒëi·ªÉm danh.")

    for record in attendance_data:
        existing_attendance = db.query(Attendance).filter(
            Attendance.session_id == session_id,
            Attendance.student_id == record.student_id
        ).first()

        if existing_attendance:
            existing_attendance.present = record.present
        else:
            new_attendance = Attendance(
                session_id=session_id,
                student_id=record.student_id,
                present=record.present
            )
            db.add(new_attendance)

    db.commit()
    return {"message": "C·∫≠p nh·∫≠t ƒëi·ªÉm danh th√†nh c√¥ng"}


# üü¢ **3. API: L·∫•y danh s√°ch ƒëi·ªÉm danh theo l·ªõp h·ªçc**
@router.get("/classes/{class_id}/attendance", response_model=List[AttendanceResponse])
def get_attendance_by_class(
    class_id: int,
    db: Session = Depends(get_db),
    current_user=Depends(get_current_user)
):
    if current_user.role not in ["admin", "teacher"]:
        raise HTTPException(status_code=403, detail="B·∫°n kh√¥ng c√≥ quy·ªÅn xem ƒëi·ªÉm danh.")

    class_obj = db.query(Class).filter(Class.id == class_id).first()
    if not class_obj:
        raise HTTPException(status_code=404, detail="L·ªõp h·ªçc kh√¥ng t·ªìn t·∫°i.")

    attendance_records = db.query(Attendance).join(ClassStudent, Attendance.student_id == ClassStudent.student_id)\
        .filter(ClassStudent.class_id == class_id).all()

    return attendance_records



from fastapi import APIRouter, Depends, HTTPException, Query
from models.student_model import Student
from models.face_embeddings import FaceEmbedding
from models.attendance_model import Attendance
from models.session_model import Session as SessionModel
from models.class_model import Class
import base64
import requests
import numpy as np
import cv2
from deepface import DeepFace
from datetime import date
from pydantic import ValidationError
from schemas.face_attendance_schema import FaceAttendanceRequest, FaceAttendanceResponse, FaceAttendanceErrorResponse

router = APIRouter()




@router.post("/face-attendance", response_model=FaceAttendanceResponse, responses={404: {"model": FaceAttendanceErrorResponse}, 422: {"model": FaceAttendanceErrorResponse}})
async def face_attendance(
    request: FaceAttendanceRequest,  # Ch·ªâ s·ª≠ d·ª•ng Pydantic model trong body
    db: Session = Depends(get_db),
    current_user=Depends(get_current_user)
):
    if current_user.role not in ["teacher", "manager"]:
        raise HTTPException(status_code=403, detail="B·∫°n kh√¥ng c√≥ quy·ªÅn th·ª±c hi·ªán ƒëi·ªÉm danh")

    try:
        # Log d·ªØ li·ªáu nh·∫≠n ƒë∆∞·ª£c ƒë·ªÉ debug
        print("Received face attendance request:", request.dict())

        # Gi·∫£i m√£ base64 th√†nh ·∫£nh
        img_data = request.image
        nparr = np.frombuffer(base64.b64decode(img_data), np.uint8)
        img = cv2.imdecode(nparr, cv2.IMREAD_COLOR)

        # Tr√≠ch xu·∫•t vector ƒë·∫∑c tr∆∞ng t·ª´ ·∫£nh m·ªõi
        new_embedding = DeepFace.represent(img, model_name="Facenet")[0]["embedding"]
        print(new_embedding)

        # L·∫•y t·∫•t c·∫£ vector ƒë·∫∑c tr∆∞ng t·ª´ b·∫£ng face_embeddings
        face_embeddings = db.query(FaceEmbedding).all()

        # So s√°nh v·ªõi t·ª´ng embedding trong database
        matched_student = None
        min_distance = float('inf')
        

        for embedding in face_embeddings:
            stored_embedding = eval(embedding.embedding)  # Chuy·ªÉn chu·ªói JSON th√†nh list
            distance = np.linalg.norm(np.array(new_embedding) - np.array(stored_embedding))
            if distance < 3.9:  # Ng∆∞·ª°ng kho·∫£ng c√°ch (c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh)
                if distance < min_distance:
                    min_distance = distance
                    matched_student = db.query(Student).filter(Student.id == embedding.student_id).first()

        if matched_student:
            # Ki·ªÉm tra l·ªõp h·ªçc v√† bu·ªïi h·ªçc
            class_obj = db.query(Class).filter(Class.id == request.class_id).first()
            if not class_obj:
                raise HTTPException(status_code=404, detail="L·ªõp h·ªçc kh√¥ng t·ªìn t·∫°i")

            session = db.query(SessionModel).filter(
                SessionModel.class_id == request.class_id,
                SessionModel.date == request.session_date
            ).first()
            if not session:
                raise HTTPException(status_code=404, detail="Bu·ªïi h·ªçc kh√¥ng t·ªìn t·∫°i")

            # Ki·ªÉm tra xem h·ªçc sinh ƒë√£ ƒëi·ªÉm danh ch∆∞a trong bu·ªïi h·ªçc n√†y
            existing_attendance = db.query(Attendance).filter(
                Attendance.class_id == request.class_id,
                Attendance.session_id == session.id,
                Attendance.student_id == matched_student.id
            ).first()

            
            if existing_attendance:
                # N·∫øu h·ªçc sinh ƒë√£ c√≥ b·∫£n ghi ƒëi·ªÉm danh, c·∫≠p nh·∫≠t tr·∫°ng th√°i
                print("H·ªçc sinh ƒë√£ ƒëi·ªÉm danh r·ªìi, c·∫≠p nh·∫≠t b·∫£n ghi ƒëi·ªÉm danh.")
                existing_attendance.status = "Present" 
                existing_attendance.session_date = request.session_date  
                db.commit()  
                return FaceAttendanceResponse(student_id=matched_student.id, full_name=matched_student.full_name)

            # Ghi nh·∫≠n ƒëi·ªÉm danh v√†o b·∫£ng attendance
            attendance = Attendance(
                class_id=request.class_id,
                session_id=session.id,
                student_id=matched_student.id,
                session_date=request.session_date,
                status="Present"
            )
            db.add(attendance)
            db.commit()

            return FaceAttendanceResponse(student_id=matched_student.id, full_name=matched_student.full_name)
        else:
            raise HTTPException(status_code=404, detail="Kh√¥ng t√¨m th·∫•y h·ªçc sinh ph√π h·ª£p")

    except ValidationError as e:
        raise HTTPException(status_code=422, detail=str(e.errors()))
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói khi x·ª≠ l√Ω ƒëi·ªÉm danh: {e}")
        raise HTTPException(status_code=500, detail=f"L·ªói khi x·ª≠ l√Ω ƒëi·ªÉm danh: {str(e)}")
