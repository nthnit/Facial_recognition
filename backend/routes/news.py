from fastapi import APIRouter, HTTPException, Depends
from sqlalchemy.orm import Session
from database.mysql import get_db
from models.news_model import News
from models.user import User
from schemas.news_schema import NewsCreate, NewsUpdate, NewsResponse
from typing import List
from routes.user import get_current_user
from datetime import datetime
import logging

# ‚úÖ Kh·ªüi t·∫°o logger ƒë·ªÉ theo d√µi l·ªói v√† h√†nh ƒë·ªông
logger = logging.getLogger(__name__)

router = APIRouter()

# üü¢ API L·∫§Y DANH S√ÅCH TIN T·ª®C (ch·ªâ Manager v√† Admin c√≥ quy·ªÅn)
@router.get("/", response_model=List[NewsResponse])
def get_news(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    if current_user.role not in ["admin", "manager"]:
        logger.warning(f"Ng∆∞·ªùi d√πng {current_user.id} kh√¥ng c√≥ quy·ªÅn xem danh s√°ch tin t·ª©c")
        raise HTTPException(status_code=403, detail="B·∫°n kh√¥ng c√≥ quy·ªÅn xem danh s√°ch tin t·ª©c")

    news = db.query(News).order_by(News.created_at.desc()).all()  # ‚úÖ S·∫Øp x·∫øp theo th·ªùi gian m·ªõi nh·∫•t
    return news

# üü¢ API L·∫§Y CHI TI·∫æT M·ªòT TIN T·ª®C
@router.get("/{news_id}", response_model=NewsResponse)
def get_news_detail(
    news_id: int, 
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    news_item = db.query(News).filter(News.id == news_id).first()
    if not news_item:
        raise HTTPException(status_code=404, detail="Tin t·ª©c kh√¥ng t·ªìn t·∫°i")

    return news_item

# üü¢ API T·∫†O TIN T·ª®C (ch·ªâ Manager v√† Admin c√≥ quy·ªÅn)
@router.post("/", response_model=NewsResponse)
def create_news(
    news_data: NewsCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    if current_user.role not in ["admin", "manager"]:
        logger.warning(f"Ng∆∞·ªùi d√πng {current_user.id} kh√¥ng c√≥ quy·ªÅn ƒëƒÉng tin")
        raise HTTPException(status_code=403, detail="B·∫°n kh√¥ng c√≥ quy·ªÅn t·∫°o tin t·ª©c")

    try:
        new_news = News(
            title=news_data.title,
            content=news_data.content,
            image_url=news_data.image_url,
            author_id=current_user.id,
            status=news_data.status,
            created_at=datetime.utcnow(),  # ‚úÖ ƒê·∫£m b·∫£o ƒë√∫ng ki·ªÉu datetime
            updated_at=datetime.utcnow()
        )

        db.add(new_news)
        db.commit()
        db.refresh(new_news)
        logger.info(f"Ng∆∞·ªùi d√πng {current_user.id} ƒë√£ ƒëƒÉng tin: {news_data.title}")
        return new_news
    except Exception as e:
        logger.error(f"L·ªói khi ƒëƒÉng tin: {e}")
        raise HTTPException(status_code=500, detail="L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau")

# üü¢ API C·∫¨P NH·∫¨T TIN T·ª®C
@router.put("/{news_id}", response_model=NewsResponse)
def update_news(
    news_id: int,
    news_data: NewsUpdate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    news_item = db.query(News).filter(News.id == news_id).first()
    if not news_item:
        raise HTTPException(status_code=404, detail="Tin t·ª©c kh√¥ng t·ªìn t·∫°i")

    # ‚úÖ Ch·ªâ cho ph√©p admin ho·∫∑c ch√≠nh ng∆∞·ªùi t·∫°o tin ch·ªânh s·ª≠a
    if current_user.role != "admin" and news_item.author_id != current_user.id:
        logger.warning(f"Ng∆∞·ªùi d√πng {current_user.id} c·ªë g·∫Øng ch·ªânh s·ª≠a tin kh√¥ng thu·ªôc s·ªü h·ªØu")
        raise HTTPException(status_code=403, detail="B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a tin t·ª©c n√†y")

    try:
        for key, value in news_data.dict(exclude_unset=True).items():
            setattr(news_item, key, value)

        news_item.updated_at = datetime.utcnow()  # ‚úÖ ƒê√∫ng ki·ªÉu datetime
        db.commit()
        db.refresh(news_item)
        logger.info(f"Ng∆∞·ªùi d√πng {current_user.id} ƒë√£ ch·ªânh s·ª≠a tin: {news_id}")
        return news_item
    except Exception as e:
        logger.error(f"L·ªói khi c·∫≠p nh·∫≠t tin t·ª©c: {e}")
        raise HTTPException(status_code=500, detail="L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau")

# üü¢ API X√ìA TIN T·ª®C
@router.delete("/{news_id}")
def delete_news(
    news_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    news_item = db.query(News).filter(News.id == news_id).first()
    if not news_item:
        raise HTTPException(status_code=404, detail="Tin t·ª©c kh√¥ng t·ªìn t·∫°i")

    # ‚úÖ Ch·ªâ cho ph√©p admin ho·∫∑c ng∆∞·ªùi t·∫°o tin x√≥a tin
    if current_user.role != "admin" and news_item.author_id != current_user.id:
        logger.warning(f"Ng∆∞·ªùi d√πng {current_user.id} c·ªë g·∫Øng x√≥a tin kh√¥ng thu·ªôc s·ªü h·ªØu")
        raise HTTPException(status_code=403, detail="B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a tin t·ª©c n√†y")

    try:
        db.delete(news_item)
        db.commit()
        logger.info(f"Ng∆∞·ªùi d√πng {current_user.id} ƒë√£ x√≥a tin: {news_id}")
        return {"detail": "Tin t·ª©c ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng"}
    except Exception as e:
        logger.error(f"L·ªói khi x√≥a tin t·ª©c: {e}")
        raise HTTPException(status_code=500, detail="L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau")
