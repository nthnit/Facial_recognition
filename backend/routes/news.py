from fastapi import APIRouter, HTTPException, Depends
from sqlalchemy.orm import Session
from database.mysql import get_db
from models.news_model import News
from models.user import User
from schemas.news_schema import NewsCreate, NewsUpdate, NewsResponse
from typing import List
from routes.user import get_current_user
from datetime import date

router = APIRouter()

# üü¢ API L·∫§Y DANH S√ÅCH TIN T·ª®C (ch·ªâ Manager v√† Admin c√≥ quy·ªÅn)
@router.get("/", response_model=List[NewsResponse])
def get_news(
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)  # ‚úÖ Y√™u c·∫ßu x√°c th·ª±c
):
    if current_user.role not in ["admin", "manager"]:
        raise HTTPException(status_code=403, detail="B·∫°n kh√¥ng c√≥ quy·ªÅn xem danh s√°ch tin t·ª©c")

    news = db.query(News).all()
    return news

# üü¢ API L·∫§Y CHI TI·∫æT M·ªòT TIN T·ª®C (ch·ªâ Manager v√† Admin c√≥ quy·ªÅn)
@router.get("/{news_id}", response_model=NewsResponse)
def get_news_detail(
    news_id: int, 
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)  # ‚úÖ Y√™u c·∫ßu x√°c th·ª±c
):
    if current_user.role not in ["admin", "manager"]:
        raise HTTPException(status_code=403, detail="B·∫°n kh√¥ng c√≥ quy·ªÅn xem chi ti·∫øt tin t·ª©c")

    news_item = db.query(News).filter(News.id == news_id).first()
    if not news_item:
        raise HTTPException(status_code=404, detail="Tin t·ª©c kh√¥ng t·ªìn t·∫°i")
    return news_item

# üü¢ API T·∫†O TIN T·ª®C (ch·ªâ Manager v√† Admin c√≥ quy·ªÅn)
@router.post("/", response_model=NewsResponse)
def create_news(
    news_data: NewsCreate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    if current_user.role not in ["admin", "manager"]:
        raise HTTPException(status_code=403, detail="B·∫°n kh√¥ng c√≥ quy·ªÅn t·∫°o tin t·ª©c")

    new_news = News(
        title=news_data.title,
        content=news_data.content,
        image_url=news_data.image_url,
        author_id=current_user.id,  # L·∫•y ID c·ªßa ng∆∞·ªùi ƒëƒÉng tin
        status=news_data.status,
        created_at=date.today(),
        updated_at=date.today()
    )

    db.add(new_news)
    db.commit()
    db.refresh(new_news)
    return new_news

# üü¢ API C·∫¨P NH·∫¨T TIN T·ª®C (ch·ªâ Manager v√† Admin c√≥ quy·ªÅn)
@router.put("/{news_id}", response_model=NewsResponse)
def update_news(
    news_id: int,
    news_data: NewsUpdate,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    news_item = db.query(News).filter(News.id == news_id).first()
    if not news_item:
        raise HTTPException(status_code=404, detail="Tin t·ª©c kh√¥ng t·ªìn t·∫°i")

    if current_user.role not in ["admin", "manager"]:
        raise HTTPException(status_code=403, detail="B·∫°n kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a tin t·ª©c")

    for key, value in news_data.dict(exclude_unset=True).items():
        setattr(news_item, key, value)

    news_item.updated_at = date.today()  # C·∫≠p nh·∫≠t ng√†y ch·ªânh s·ª≠a
    db.commit()
    db.refresh(news_item)
    return news_item

# üü¢ API X√ìA TIN T·ª®C (ch·ªâ Manager v√† Admin c√≥ quy·ªÅn)
@router.delete("/{news_id}")
def delete_news(
    news_id: int,
    db: Session = Depends(get_db),
    current_user: User = Depends(get_current_user)
):
    news_item = db.query(News).filter(News.id == news_id).first()
    if not news_item:
        raise HTTPException(status_code=404, detail="Tin t·ª©c kh√¥ng t·ªìn t·∫°i")

    if current_user.role not in ["admin", "manager"]:
        raise HTTPException(status_code=403, detail="B·∫°n kh√¥ng c√≥ quy·ªÅn x√≥a tin t·ª©c")

    db.delete(news_item)
    db.commit()
    return {"detail": "Tin t·ª©c ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng"}
