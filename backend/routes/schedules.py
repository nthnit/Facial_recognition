from fastapi import APIRouter, HTTPException, Depends
from sqlalchemy.orm import Session
from models.schedule_model import Schedule
from schemas.schedule_schema import ScheduleResponse  # S·ª≠ d·ª•ng schema t∆∞∆°ng ·ª©ng v·ªõi b·∫£ng schedules
from database import get_db
from typing import List
from sqlalchemy import desc

router = APIRouter()

# üü¢ API L·∫•y Danh S√°ch L·ªãch H·ªçc C·ªßa L·ªõp
@router.get("/{class_id}", response_model=List[ScheduleResponse])
def get_class_schedule(class_id: int, db: Session = Depends(get_db)):
    # L·∫•y t·∫•t c·∫£ c√°c l·ªãch h·ªçc c·ªßa l·ªõp t·ª´ b·∫£ng schedules
    schedules = db.query(Schedule).filter(Schedule.class_id == class_id).all()

    if not schedules:
        raise HTTPException(status_code=404, detail="L·ªãch h·ªçc kh√¥ng t·ªìn t·∫°i")

    # Tr·∫£ v·ªÅ d·ªØ li·ªáu l·ªãch h·ªçc, bao g·ªìm tr∆∞·ªùng created_at
    return [
        {
            "class_id": schedule.class_id,
            "day_of_week": schedule.day_of_week,
            "start_time": schedule.start_time.strftime("%H:%M"),  # Chuy·ªÉn datetime.time th√†nh string
            "end_time": schedule.end_time.strftime("%H:%M"),  # Chuy·ªÉn datetime.time th√†nh string
            "created_at": schedule.created_at.strftime("%Y-%m-%d %H:%M:%S")  # Th√™m tr∆∞·ªùng created_at
        }
        for schedule in schedules
    ]
    
@router.get("/{class_id}/latest", response_model=List[ScheduleResponse])
def get_latest_class_schedule(class_id: int, db: Session = Depends(get_db)):
    # L·∫•y b·∫£n ghi l·ªãch h·ªçc m·ªõi nh·∫•t theo class_id v√† created_at
    latest_schedule = db.query(Schedule).filter(Schedule.class_id == class_id).order_by(desc(Schedule.created_at)).first()

    if not latest_schedule:
        raise HTTPException(status_code=404, detail="Kh√¥ng c√≥ l·ªãch h·ªçc m·ªõi cho l·ªõp n√†y")

    # L·∫•y t·∫•t c·∫£ l·ªãch h·ªçc c√≥ created_at gi·ªëng b·∫£n ghi l·ªãch h·ªçc m·ªõi nh·∫•t
    latest_schedules = db.query(Schedule).filter(
        Schedule.class_id == class_id,
        Schedule.created_at == latest_schedule.created_at
    ).all()

    # Chuy·ªÉn start_time v√† end_time th√†nh chu·ªói HH:MM cho t·∫•t c·∫£ c√°c b·∫£n ghi
    schedule_list = []
    for schedule in latest_schedules:
        start_time_str = schedule.start_time.strftime("%H:%M") if schedule.start_time else None
        end_time_str = schedule.end_time.strftime("%H:%M") if schedule.end_time else None

        schedule_list.append({
            "class_id": schedule.class_id,
            "day_of_week": schedule.day_of_week,
            "start_time": start_time_str,
            "end_time": end_time_str,
            "created_at": schedule.created_at.strftime("%Y-%m-%d %H:%M:%S")
        })

    # Tr·∫£ v·ªÅ danh s√°ch l·ªãch h·ªçc
    return schedule_list


