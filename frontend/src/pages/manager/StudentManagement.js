import React, { useState, useEffect } from "react";
import { Table, Button, Modal, Form, Input, Space, Typography, message, Popconfirm, DatePicker } from "antd";
import { PlusOutlined, EditOutlined, DeleteOutlined, FileExcelOutlined } from "@ant-design/icons";
import axios from "axios";
import moment from "moment";
import * as XLSX from "xlsx"; // üìå Import th∆∞ vi·ªán XLSX
import { useNavigate } from "react-router-dom";

const { Title } = Typography;

const StudentManagement = () => {
    const [students, setStudents] = useState([]);
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [editingStudent, setEditingStudent] = useState(null);
    const [loading, setLoading] = useState(false);
    const [form] = Form.useForm();
    const [messageApi, contextHolder] = message.useMessage();
    const navigate = useNavigate();

    useEffect(() => {
        fetchStudents();
    }, []);

    // üîπ API l·∫•y danh s√°ch h·ªçc sinh
    const fetchStudents = async () => {
        setLoading(true);
        try {
            const response = await axios.get("http://127.0.0.1:8000/students");
            setStudents(response.data);
        } catch (error) {
            messageApi.error("L·ªói khi t·∫£i danh s√°ch h·ªçc sinh.");
        }
        setLoading(false);
    };

    // üîπ Xu·∫•t danh s√°ch h·ªçc sinh ra file Excel
    const exportToExcel = () => {
        if (students.length === 0) {
            messageApi.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t.");
            return;
        }

        const dataToExport = students.map((student) => ({
            "M√£ sinh vi√™n": student.id,
            "H·ªç v√† T√™n": student.full_name,
            "Email": student.email,
            "S·ªë ƒëi·ªán tho·∫°i": student.phone_number,
            "ƒê·ªãa ch·ªâ": student.address,
            "Ng√†y sinh": student.date_of_birth ? moment(student.date_of_birth).format("DD-MM-YYYY") : "N/A",
            "NƒÉm nh·∫≠p h·ªçc": student.admission_year,
            "Tr·∫°ng th√°i": student.status,
        }));

        const worksheet = XLSX.utils.json_to_sheet(dataToExport);
        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, "Danh s√°ch h·ªçc sinh");

        XLSX.writeFile(workbook, "DanhSachHocSinh.xlsx");
        messageApi.success("Xu·∫•t danh s√°ch h·ªçc sinh th√†nh c√¥ng!");
    };

    // üîπ Hi·ªÉn th·ªã modal th√™m/s·ª≠a h·ªçc sinh
    const showModal = (student = null) => {
        setEditingStudent(student);
        setIsModalOpen(true);
        form.setFieldsValue(
            student
                ? { ...student, date_of_birth: student.date_of_birth ? moment(student.date_of_birth) : null }
                : { full_name: "", email: "", phone_number: "", address: "", date_of_birth: null }
        );
    };

    // üîπ X·ª≠ l√Ω th√™m ho·∫∑c c·∫≠p nh·∫≠t h·ªçc sinh
    const handleOk = async () => {
        try {
            const values = await form.validateFields();
            const payload = {
                ...values,
                date_of_birth: values.date_of_birth ? values.date_of_birth.format("YYYY-MM-DD") : null,
                admission_year: values.admission_year || new Date().getFullYear(),
                status: values.status || "active",
                image: values.image || null,
            };

            if (editingStudent) {
                await axios.put(`http://127.0.0.1:8000/students/${editingStudent.id}`, payload);
                messageApi.success("C·∫≠p nh·∫≠t h·ªçc sinh th√†nh c√¥ng!");
            } else {
                await axios.post("http://127.0.0.1:8000/students", payload);
                messageApi.success("Th√™m h·ªçc sinh th√†nh c√¥ng!");
            }

            fetchStudents();
            setIsModalOpen(false);
            form.resetFields();
        } catch (error) {
            console.error("L·ªói khi l∆∞u h·ªçc sinh:", error);
            messageApi.error("L·ªói khi l∆∞u h·ªçc sinh.");
        }
    };

    // üîπ X·ª≠ l√Ω xo√° h·ªçc sinh
    const handleDelete = async (id) => {
        try {
            await axios.delete(`http://127.0.0.1:8000/students/${id}`);
            messageApi.success("X√≥a h·ªçc sinh th√†nh c√¥ng!");
            fetchStudents();
        } catch (error) {
            messageApi.error("L·ªói khi x√≥a h·ªçc sinh.");
        }
    };

    // üîπ C·∫•u h√¨nh c·ªôt c·ªßa b·∫£ng danh s√°ch h·ªçc sinh
    const columns = [
        {
            title: "M√£ sinh vi√™n",
            dataIndex: "id",
            key: "id",
            render: (id) => (
                <Typography.Link onClick={() => navigate(`/manager/students/${id}`)}>
                    {id}
                </Typography.Link>
            ), // ‚úÖ Nh·∫•p v√†o ID ƒë·ªÉ xem chi ti·∫øt
        },
        { title: "H·ªç v√† T√™n", dataIndex: "full_name", key: "full_name" },
        { title: "Email", dataIndex: "email", key: "email" },
        { title: "S·ªë ƒëi·ªán tho·∫°i", dataIndex: "phone_number", key: "phone_number" },
        { title: "ƒê·ªãa ch·ªâ", dataIndex: "address", key: "address" },
        {
            title: "Ng√†y sinh",
            dataIndex: "date_of_birth",
            key: "date_of_birth",
            render: (dob) => (dob ? moment(dob).format("DD-MM-YYYY") : "N/A"),
        },
        {
            title: "H√†nh ƒë·ªông",
            key: "actions",
            render: (_, record) => (
                <Space>
                    <Button icon={<EditOutlined />} onClick={() => showModal(record)} />
                    <Popconfirm
                        title="B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a h·ªçc sinh n√†y?"
                        onConfirm={() => handleDelete(record.id)}
                        okText="X√≥a"
                        cancelText="H·ªßy"
                    >
                        <Button icon={<DeleteOutlined />} danger />
                    </Popconfirm>
                </Space>
            ),
        },
    ];

    return (
        <div style={{ padding: 20 }}>
            {contextHolder} {/* ƒê·∫∑t contextHolder ƒë·ªÉ message ho·∫°t ƒë·ªông */}
            <Title level={2}>Qu·∫£n l√Ω h·ªçc sinh</Title>
            <Space style={{ marginBottom: 20 }}>
                <Button type="primary" icon={<PlusOutlined />} onClick={() => showModal()}>
                    Th√™m h·ªçc sinh
                </Button>
                <Button type="default" icon={<FileExcelOutlined />} onClick={exportToExcel}>
                    Xu·∫•t Excel
                </Button>
            </Space>
            <Table columns={columns} dataSource={students} loading={loading} rowKey="id" />

            <Modal title={editingStudent ? "Ch·ªânh s·ª≠a h·ªçc sinh" : "Th√™m h·ªçc sinh"} open={isModalOpen} onOk={handleOk} onCancel={() => setIsModalOpen(false)}>
                <Form form={form} layout="vertical">
                    <Form.Item label="H·ªç v√† T√™n" name="full_name" rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p h·ªç t√™n!" }]}>
                        <Input />
                    </Form.Item>
                    <Form.Item label="Email" name="email" rules={[{ required: true, type: "email", message: "Email kh√¥ng h·ª£p l·ªá!" }]}>
                        <Input />
                    </Form.Item>
                    <Form.Item label="S·ªë ƒëi·ªán tho·∫°i" name="phone_number" rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i!" }]}>
                        <Input />
                    </Form.Item>
                    <Form.Item label="ƒê·ªãa ch·ªâ" name="address" rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p ƒë·ªãa ch·ªâ!" }]}>
                        <Input />
                    </Form.Item>
                    <Form.Item label="Ng√†y sinh" name="date_of_birth">
                        <DatePicker format="YYYY-MM-DD" style={{ width: "100%" }} />
                    </Form.Item>
                </Form>
            </Modal>
        </div>
    );
};

export default StudentManagement;
