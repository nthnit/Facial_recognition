import React, { useState, useEffect } from "react";
import { Table, Button, Modal, Form, Input, Space, Typography, message, Popconfirm, DatePicker, Upload } from "antd";
import { PlusOutlined, EditOutlined, DeleteOutlined, FileExcelOutlined, SearchOutlined, UploadOutlined } from "@ant-design/icons";
import moment from "moment";
import * as XLSX from "xlsx"; 
import { useNavigate, Link } from "react-router-dom";
import usePageTitle from "../common/usePageTitle";
import { fetchStudents, createStudent, updateStudent, deleteStudent, uploadStudentImage } from "../../api/students";

const { Title } = Typography;
const StudentManagement = () => {
    usePageTitle("Student Management");
    const [students, setStudents] = useState([]);
    const [filteredStudents, setFilteredStudents] = useState([]);
    const [searchText, setSearchText] = useState("");
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [editingStudent, setEditingStudent] = useState(null);
    const [loading, setLoading] = useState(false);
    const [uploading, setUploading] = useState(false);
    const [form] = Form.useForm();
    const navigate = useNavigate();

    useEffect(() => {
        fetchStudentsData();
    }, []);

    const fetchStudentsData = async () => {
        setLoading(true);
        try {
            const data = await fetchStudents();
            setStudents(data);
            setFilteredStudents(data);
        } catch (error) {
            handleRequestError(error, "L·ªói khi t·∫£i danh s√°ch h·ªçc sinh.");
        }
        setLoading(false);
    };

    const handleRequestError = (error, defaultMessage) => {
        if (error.message === "Unauthorized") {
            message.error("Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
            localStorage.removeItem("token");
            navigate("/login");
        } else {
            message.error(defaultMessage);
        }
    };

    const handleSearch = (e) => {
        const value = e.target.value.toLowerCase();
        setSearchText(value);
        
        const filtered = students.filter(
            (student) =>
                student.id.toString().includes(value) ||
                student.full_name.toLowerCase().includes(value) ||
                student.email.toLowerCase().includes(value) ||
                student.phone_number.includes(value)
        );

        setFilteredStudents(filtered);
    };

    const showModal = (student = null) => {
        setEditingStudent(student);
        setIsModalOpen(true);
        form.setFieldsValue(
            student
                ? { 
                    ...student, 
                    date_of_birth: student.date_of_birth ? moment(student.date_of_birth) : null,
                    image_url: student.image || student.image_url || ""
                  }
                : { full_name: "", email: "", phone_number: "", address: "", date_of_birth: null, image_url: "" }
        );
    };

    const handleOk = async () => {
        try {
            const values = await form.validateFields();
            const payload = {
                ...values,
                date_of_birth: values.date_of_birth ? values.date_of_birth.format("YYYY-MM-DD") : null,
                admission_year: values.admission_year || new Date().getFullYear(),
                status: values.status || "active",
                address: values.address || "Ch∆∞a c·∫≠p nh·∫≠t",
                image_url: values.image_url || null
            };
            
            if (editingStudent) {
                await updateStudent(editingStudent.id, payload);
                message.success("C·∫≠p nh·∫≠t h·ªçc sinh th√†nh c√¥ng!");
            } else {
                await createStudent(payload);
                message.success("Th√™m h·ªçc sinh th√†nh c√¥ng!");
            }

            fetchStudentsData();
            setIsModalOpen(false);
            form.resetFields();
        } catch (error) {
            if (error.response?.status === 400 && error.response.data.detail === "Email ƒë√£ t·ªìn t·∫°i") {
                message.error("Email ƒë√£ t·ªìn t·∫°i. Vui l√≤ng nh·∫≠p email kh√°c!");
            } else {
                message.error("L·ªói khi l∆∞u h·ªçc sinh. Vui l√≤ng th·ª≠ l·∫°i.");
            }
        }
    };

    const handleUpload = async ({ file }) => {
        setUploading(true);
        try {
            const response = await uploadStudentImage(file);
            form.setFieldsValue({ image_url: response.image_url });
            message.success("·∫¢nh m·ªõi ƒë√£ t·∫£i l√™n th√†nh c√¥ng! ·∫¢nh c≈© s·∫Ω ƒë∆∞·ª£c x√≥a t·ª± ƒë·ªông.");
        } catch (error) {
            if (error.message === "Unauthorized") {
                message.error("B·∫°n kh√¥ng c√≥ quy·ªÅn upload ·∫£nh.");
            } else {
                message.error("L·ªói khi t·∫£i ·∫£nh l√™n Cloudinary.");
            }
        }
        setUploading(false);
    };

    const handleDelete = async (id) => {
        try {
            await deleteStudent(id);
            message.success("X√≥a h·ªçc sinh th√†nh c√¥ng!");
            fetchStudentsData();
        } catch (error) {
            handleRequestError(error, "L·ªói khi x√≥a h·ªçc sinh.");
        }
    };

    // üîπ C·∫•u h√¨nh c·ªôt c·ªßa b·∫£ng danh s√°ch h·ªçc sinh
    const columns = [
        {
            title: "M√£ sinh vi√™n",
            dataIndex: "id",
            key: "id",
            render: (text) => (
                <Link to={`/manager/students/${text}`} style={{ color: 'blue' }}>
                    {text}
                </Link>
            ), // Link t·ªõi trang chi ti·∫øt h·ªçc sinh
        },
        { title: "H·ªç v√† T√™n", dataIndex: "full_name", key: "full_name" },
        { title: "NƒÉm nh·∫≠p h·ªçc", dataIndex: "admission_year", key: "admission_year" },
        { title: "Email", dataIndex: "email", key: "email" },
        { title: "S·ªë ƒëi·ªán tho·∫°i", dataIndex: "phone_number", key: "phone_number" },
        { title: "ƒê·ªãa ch·ªâ", dataIndex: "address", key: "address" },
        {
            title: "Ng√†y sinh",
            dataIndex: "date_of_birth",
            key: "date_of_birth",
            render: (dob) => (dob ? moment(dob).format("DD-MM-YYYY") : "N/A"),
        },
        {
            title: "H√†nh ƒë·ªông",
            key: "actions",
            render: (_, record) => (
                <Space>
                    <Button icon={<EditOutlined />} onClick={() => showModal(record)} />
                    <Popconfirm
                        title="B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a h·ªçc sinh n√†y?"
                        onConfirm={() => handleDelete(record.id)}
                        okText="X√≥a"
                        cancelText="H·ªßy"
                    >
                        <Button icon={<DeleteOutlined />} danger />
                    </Popconfirm>
                </Space>
            ),
        },
    ];

    // üîπ Xu·∫•t danh s√°ch h·ªçc sinh ra file Excel
    const exportToExcel = () => {
        if (students.length === 0) {
            message.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ xu·∫•t.");
            return;
        }

        const dataToExport = students.map((student) => ({
            "M√£ sinh vi√™n": student.id,
            "H·ªç v√† T√™n": student.full_name,
            "Email": student.email,
            "S·ªë ƒëi·ªán tho·∫°i": student.phone_number,
            "ƒê·ªãa ch·ªâ": student.address,
            "Ng√†y sinh": student.date_of_birth ? moment(student.date_of_birth).format("DD-MM-YYYY") : "N/A",
            "NƒÉm nh·∫≠p h·ªçc": student.admission_year,
            "Tr·∫°ng th√°i": student.status,
        }));

        const worksheet = XLSX.utils.json_to_sheet(dataToExport);
        const workbook = XLSX.utils.book_new();
        XLSX.utils.book_append_sheet(workbook, worksheet, "Danh s√°ch h·ªçc sinh");

        XLSX.writeFile(workbook, "DanhSachHocSinh.xlsx");
        message.success("Xu·∫•t danh s√°ch h·ªçc sinh th√†nh c√¥ng!");
    };


    return (
        <div style={{ padding: 20 }}>
            <Title level={2}>Qu·∫£n l√Ω h·ªçc sinh</Title>
            <Space style={{ marginBottom: 20 }}>
                <Input placeholder="T√¨m ki·∫øm h·ªçc sinh..." prefix={<SearchOutlined />} onChange={handleSearch} allowClear />
                <Button type="primary" icon={<PlusOutlined />} onClick={() => showModal()}>
                    Th√™m h·ªçc sinh
                </Button>
                <Button type="default" icon={<FileExcelOutlined />} onClick={exportToExcel}>
                    Xu·∫•t Excel
                </Button>
            </Space>
            <Table columns={columns} dataSource={filteredStudents} loading={loading} rowKey="id" />
            <Modal 
                title={editingStudent ? "C·∫≠p nh·∫≠t h·ªçc sinh" : "Th√™m h·ªçc sinh"} 
                open={isModalOpen} 
                onOk={handleOk} 
                onCancel={() => setIsModalOpen(false)}
            >
                <Form form={form} layout="vertical">
                    <Form.Item label="H·ªç v√† T√™n" name="full_name" rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p h·ªç t√™n!" }]}>
                        <Input />
                    </Form.Item>
                    <Form.Item label="Email" name="email" rules={[{ required: true, type: "email", message: "Vui l√≤ng nh·∫≠p email h·ª£p l·ªá!" }]}>
                        <Input />
                    </Form.Item>
                    <Form.Item label="S·ªë ƒëi·ªán tho·∫°i" name="phone_number" rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p s·ªë ƒëi·ªán tho·∫°i!" }]}>
                        <Input />
                    </Form.Item>
                    <Form.Item label="ƒê·ªãa ch·ªâ" name="address">
                        <Input placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ h·ªçc sinh" />
                    </Form.Item>
                    <Form.Item label="Ng√†y sinh" name="date_of_birth">
                        <DatePicker format="YYYY-MM-DD" />
                    </Form.Item>
                    <Form.Item label="T·∫£i ·∫£nh l√™n">
                        <Upload customRequest={handleUpload} showUploadList={false}>
                            <Button icon={<UploadOutlined />} loading={uploading}>Ch·ªçn ·∫£nh</Button>
                        </Upload>
                    </Form.Item>
                    <Form.Item label="·∫¢nh ƒë√£ t·∫£i l√™n" name="image_url">
                        <Input placeholder="ƒê∆∞·ªùng d·∫´n ·∫£nh" readOnly />
                     </Form.Item>
                </Form>
            </Modal>
        </div>
    );
};

export default StudentManagement;