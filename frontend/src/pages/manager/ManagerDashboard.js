import React, { useEffect, useState } from "react";
import { Card, Col, Row, Typography, message, Button } from "antd";
import { UserOutlined, BookOutlined, SolutionOutlined, ReadOutlined } from "@ant-design/icons";
import axios from "axios";
import { useNavigate } from "react-router-dom";

const { Title } = Typography;

const ManagerDashboard = () => {
    const [stats, setStats] = useState({
        students: 0,
        teachers: 0,
        classes: 0,
        news: 0,
    });

    const navigate = useNavigate(); // ƒêi·ªÅu h∆∞·ªõng khi token h·∫øt h·∫°n

    // H√†m l·∫•y token t·ª´ localStorage v√† t·∫°o headers
    const getAuthHeaders = () => {
        const token = localStorage.getItem("token");
        if (!token) {
            message.error("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p!");
            navigate("/login"); // ƒêi·ªÅu h∆∞·ªõng v·ªÅ trang login n·∫øu kh√¥ng c√≥ token
        }
        return { Authorization: `Bearer ${token}` };
    };

    useEffect(() => {
        // G·ªçi API ƒë·ªÉ l·∫•y d·ªØ li·ªáu t·ªïng quan
        const fetchStats = async () => {
            try {
                const response = await axios.get("http://127.0.0.1:8000/manager/stats", {
                    headers: getAuthHeaders()
                });
                setStats(response.data);
            } catch (error) {
                handleRequestError(error, "L·ªói khi t·∫£i d·ªØ li·ªáu t·ªïng quan");
            }
        };

        fetchStats();
    }, []);

    const handleRequestError = (error, defaultMessage) => {
        if (error.response?.status === 401) {
            message.error("Phi√™n ƒëƒÉng nh·∫≠p h·∫øt h·∫°n. Vui l√≤ng ƒëƒÉng nh·∫≠p l·∫°i!");
            localStorage.removeItem("token"); // X√≥a token khi h·∫øt h·∫°n
            navigate("/login");
        } else if (error.response?.status === 403) {
            message.error("B·∫°n kh√¥ng c√≥ quy·ªÅn xem th·ªëng k√™!");
        } else {
            message.error(defaultMessage);
        }
    };

    return (
        <div style={styles.container}>
            <Title level={2} style={styles.title}>üìä Dashboard Qu·∫£n l√Ω</Title>
            <Row gutter={[16, 16]}>
                <Col xs={24} sm={12} lg={6}>
                    <Card style={styles.card} hoverable>
                        <UserOutlined style={styles.icon} />
                        <Title level={3}>{stats.students}</Title>
                        <p>Sinh vi√™n</p>
                        <Button type="link" style={styles.linkButton} onClick={() => navigate('/manager/students')}>
                            Xem chi ti·∫øt
                        </Button>
                    </Card>
                </Col>
                <Col xs={24} sm={12} lg={6}>
                    <Card style={styles.card} hoverable>
                        <SolutionOutlined style={styles.icon} />
                        <Title level={3}>{stats.teachers}</Title>
                        <p>Gi·∫£ng vi√™n</p>
                        <Button type="link" style={styles.linkButton} onClick={() => navigate('/manager/teachers')}>
                            Xem chi ti·∫øt
                        </Button>
                    </Card>
                </Col>
                <Col xs={24} sm={12} lg={6}>
                    <Card style={styles.card} hoverable>
                        <BookOutlined style={styles.icon} />
                        <Title level={3}>{stats.classes}</Title>
                        <p>L·ªõp h·ªçc</p>
                        <Button type="link" style={styles.linkButton} onClick={() => navigate('/manager/classes')}>
                            Xem chi ti·∫øt
                        </Button>
                    </Card>
                </Col>
                <Col xs={24} sm={12} lg={6}>
                    <Card style={styles.card} hoverable>
                        <ReadOutlined style={styles.icon} />
                        <Title level={3}>{stats.news}</Title>
                        <p>B√†i vi·∫øt m·ªõi</p>
                        <Button type="link" style={styles.linkButton} onClick={() => navigate('/manager/news')}>
                            Xem chi ti·∫øt
                        </Button>
                    </Card>
                </Col>
            </Row>
        </div>
    );
};

const styles = {
    container: {
        padding: "20px",
        backgroundColor: "#f5f5f5", // Th√™m m√†u n·ªÅn cho giao di·ªán
        borderRadius: "10px", // Bo g√≥c to√†n b·ªô trang
    },
    title: {
        marginBottom: "30px",  // TƒÉng kho·∫£ng c√°ch gi·ªØa ti√™u ƒë·ªÅ v√† c√°c ph·∫ßn kh√°c
        textAlign: "center",
        fontWeight: "bold",
        fontSize: "24px",
        color: "#333",
    },
    card: {
        textAlign: "center",
        padding: "20px",
        borderRadius: "10px",
        boxShadow: "0px 4px 10px rgba(0, 0, 0, 0.1)",
        backgroundColor: "#fff",  // M√†u n·ªÅn c·ªßa m·ªói card
    },
    icon: {
        fontSize: "50px",
        color: "#1890ff",
        marginBottom: "10px",
    },
    linkButton: {
        color: "#1890ff",
        padding: 0,
        fontSize: "14px",
        fontWeight: "bold",
    },
};

export default ManagerDashboard;
