import React, { useEffect, useState } from "react";
import { useParams, Link, useNavigate } from "react-router-dom";
import { Breadcrumb, Card, Table, Tabs, message, Button, Modal, Form, Input, Select, Switch } from "antd";
import axios from "axios";
import moment from "moment";
import * as XLSX from "xlsx";
const { TabPane } = Tabs;
const { Option } = Select;

const ClassDetail = () => {
    const { id } = useParams();
    const navigate = useNavigate();
    const [classInfo, setClassInfo] = useState(null);
    const [sessions, setSessions] = useState([]);
    const [students, setStudents] = useState([]);
    const [loading, setLoading] = useState(true);
    const [isUpdateModalOpen, setIsUpdateModalOpen] = useState(false);
    const [isEnrollModalOpen, setIsEnrollModalOpen] = useState(false);
    const [isAttendanceModalOpen, setIsAttendanceModalOpen] = useState(false);
    const [allStudents, setAllStudents] = useState([]);
    const [attendanceData, setAttendanceData] = useState({});
    const [currentSessionId, setCurrentSessionId] = useState(null);
    const [currentSession, setCurrentSession] = useState(null);
    const [searchTerm, setSearchTerm] = useState("");
    const [form] = Form.useForm();

    const getAuthHeaders = () => {
        const token = localStorage.getItem("token");
        if (!token) {
            message.error("B·∫°n ch∆∞a ƒëƒÉng nh·∫≠p!");
            navigate("/login");
        }
        return { Authorization: `Bearer ${token}` };
    };

    useEffect(() => {
        fetchClassDetail();
        fetchSessions();
        fetchStudents();
    }, [id]);

    const fetchClassDetail = async () => {
        try {
            const response = await axios.get(`http://127.0.0.1:8000/classes/${id}`, {
                headers: getAuthHeaders(),
            });
            setClassInfo(response.data);
        } catch (error) {
            message.error("L·ªói khi t·∫£i th√¥ng tin l·ªõp h·ªçc.");
        }
        setLoading(false);
    };

    const fetchSessions = async () => {
        try {
            const response = await axios.get(`http://127.0.0.1:8000/classes/${id}/sessions`, {
                headers: getAuthHeaders(),
            });
            setSessions(response.data);
        } catch (error) {
            message.error("L·ªói khi t·∫£i danh s√°ch bu·ªïi h·ªçc.");
        }
    };

    const fetchStudents = async () => {
        try {
            const response = await axios.get(`http://127.0.0.1:8000/classes/${id}/students`, {
                headers: getAuthHeaders(),
            });
            setStudents(response.data);
        } catch (error) {
            message.error("L·ªói khi t·∫£i danh s√°ch h·ªçc sinh.");
        }
    };

    const fetchAllStudents = async () => {
        try {
            const response = await axios.get("http://127.0.0.1:8000/students", {
                headers: getAuthHeaders(),
            });
            const enrolledStudentIds = new Set(students.map((s) => s.id));
            setAllStudents(response.data.filter((s) => !enrolledStudentIds.has(s.id)));
        } catch (error) {
            message.error("L·ªói khi t·∫£i danh s√°ch h·ªçc sinh.");
        }
    };

    const handleUpdateClass = async () => {
        try {
            const values = await form.validateFields();
            await axios.put(`http://127.0.0.1:8000/classes/${id}`, values, {
                headers: getAuthHeaders(),
            });
            message.success("C·∫≠p nh·∫≠t th√¥ng tin l·ªõp h·ªçc th√†nh c√¥ng!");
            setIsUpdateModalOpen(false);
            fetchClassDetail();
        } catch (error) {
            message.error("L·ªói khi c·∫≠p nh·∫≠t l·ªõp h·ªçc.");
        }
    };

    const formatWeeklySchedule = (schedule) => {
        const daysMap = ["Th·ª© Hai", "Th·ª© Ba", "Th·ª© T∆∞", "Th·ª© NƒÉm", "Th·ª© S√°u", "Th·ª© B·∫£y", "Ch·ªß Nh·∫≠t"];
        return schedule ? schedule.map(day => daysMap[day]).join(", ") : "Kh√¥ng c√≥ l·ªãch h·ªçc";
    };


    const openAttendanceModal = async (session) => {
        console.log("Opening attendance modal for session:", session); 
        setCurrentSession(session);
        
        try {
            // üîπ G·ªçi API ƒë·ªÉ l·∫•y tr·∫°ng th√°i ƒëi·ªÉm danh hi·ªán t·∫°i c·ªßa session n√†y
            const response = await axios.get(
                `http://127.0.0.1:8000/classes/${id}/sessions/${session.date}/attendance`,
                { headers: getAuthHeaders() }
            );
    
            if (response.data.length > 0) {
                // üîπ N·∫øu c√≥ d·ªØ li·ªáu ƒëi·ªÉm danh tr∆∞·ªõc ƒë√≥, s·ª≠ d·ª•ng d·ªØ li·ªáu n√†y
                const studentAttendance = {};
                session.students.forEach((student) => {
                    const attendanceRecord = response.data.find((att) => att.student_id === student.id);
                    studentAttendance[student.id] = attendanceRecord ? attendanceRecord.status : "Absent";
                });
                setAttendanceData(studentAttendance);
            } else {
                // üîπ N·∫øu kh√¥ng c√≥ d·ªØ li·ªáu ƒëi·ªÉm danh, m·∫∑c ƒë·ªãnh t·∫•t c·∫£ h·ªçc sinh v·∫Øng m·∫∑t
                const studentAttendance = {};
                students.forEach((student) => {
                    studentAttendance[student.id] = "Absent";
                });
                setAttendanceData(studentAttendance);
            }
        } catch (error) {
            console.error("L·ªói khi l·∫•y d·ªØ li·ªáu ƒëi·ªÉm danh:", error.response?.data || error);
            message.warning("Ch∆∞a c√≥ d·ªØ li·ªáu ƒëi·ªÉm danh. H√£y th·ª±c hi·ªán ƒëi·ªÉm danh l·∫ßn ƒë·∫ßu.");
            
            // üîπ N·∫øu API th·∫•t b·∫°i, hi·ªÉn th·ªã danh s√°ch h·ªçc sinh ƒë·ªÉ ƒëi·ªÉm danh l·∫ßn ƒë·∫ßu
            const studentAttendance = {};
            students.forEach((student) => {
                studentAttendance[student.id] = "Absent";
            });
            setAttendanceData(studentAttendance);
        }
    
        setIsAttendanceModalOpen(true);
    };
    
    

    const handleAttendanceChange = (studentId, checked) => {
        setAttendanceData((prevData) => ({
            ...prevData,
            [studentId]: checked ? "Present" : "Absent",
        }));
    };

    const submitAttendance = async () => {
        try {
            const attendancePayload = Object.entries(attendanceData).map(([studentId, status]) => ({
                class_id: Number(id),  // ƒê·∫£m b·∫£o class_id l√† s·ªë
                session_id: currentSession.session_id,
                student_id: Number(studentId),  // ƒê·∫£m b·∫£o student_id l√† s·ªë
                status: status === "Present" ? "Present" : "Absent" ,
            }));
    
            console.log("Sending attendance payload:", attendancePayload);  // Ki·ªÉm tra d·ªØ li·ªáu
    
            await axios.post(
                `http://127.0.0.1:8000/classes/${id}/sessions/${currentSession.date}/attendance`,
                attendancePayload,
                { headers: getAuthHeaders() }
            );
    
            message.success("ƒêi·ªÉm danh th√†nh c√¥ng!");
            setIsAttendanceModalOpen(false);
            fetchSessions();
        } catch (error) {
            console.error("L·ªói khi g·ª≠i ƒëi·ªÉm danh:", error.response?.data || error);
            message.error("L·ªói khi g·ª≠i ƒëi·ªÉm danh.");
        }
    };
    


    const handleEnrollStudent = async (studentId) => {
        try {
            await axios.post(`http://127.0.0.1:8000/classes/${id}/enroll/${studentId}`, {}, {
                headers: getAuthHeaders(),
            });
            message.success("H·ªçc sinh ƒë√£ ƒë∆∞·ª£c th√™m v√†o l·ªõp!");
            fetchStudents();
            setIsEnrollModalOpen(false);
        } catch (error) {
            message.error("L·ªói khi th√™m h·ªçc sinh v√†o l·ªõp.");
        }
    };

    const exportAttendanceToExcel = async () => {
        try {
            const attendanceResponse = await axios.get(
                `http://127.0.0.1:8000/classes/${id}/attendance`,
                { headers: getAuthHeaders() }
            );

            const attendanceRecords = attendanceResponse.data;
            if (!attendanceRecords.length) {
                message.warning("Kh√¥ng c√≥ d·ªØ li·ªáu ƒëi·ªÉm danh ƒë·ªÉ xu·∫•t.");
                return;
            }

            // ‚úÖ Ti√™u ƒë·ªÅ file
            const title = [["Attendance Register"]];
            const classInfoHeader = [
                ["Class Code:", classInfo.class_code],
                ["Teacher:", classInfo.teacher_name],
                ["From:", moment(classInfo.start_date).format("DD-MM-YYYY")],
                ["To:", moment(classInfo.end_date).format("DD-MM-YYYY")],
                ["Schedule:", classInfo.weekly_schedule.join(", ")],
                ["Total Sessions:", classInfo.total_sessions]
            ];

            // ‚úÖ Ti√™u ƒë·ªÅ c·ªôt ch√≠nh
            const mainHeader = ["No", "Student Name", "Date of Birth", "Gender", "Join Date"];

            // ‚úÖ Ti√™u ƒë·ªÅ c√°c c·ªôt ng√†y h·ªçc (Bu·ªïi s·ªë - Ng√†y)
            const sessionHeaders = sessions.map((session, index) => ({
                header: `S${index + 1} - ${moment(session.date).format("DD-MM-YYYY")}`,
                date: session.date
            }));

            // ‚úÖ Ho√†n thi·ªán h√†ng ti√™u ƒë·ªÅ
            const fullHeader = [...mainHeader, ...sessionHeaders.map(s => s.header), "Note"];

            // ‚úÖ X√¢y d·ª±ng d·ªØ li·ªáu h·ªçc sinh
            const studentRows = students.map((student, idx) => {
                const row = [
                    idx + 1, // STT
                    student.full_name,
                    moment(student.dob).format("DD-MM-YYYY"),
                    student.gender,
                    moment(student.join_date).format("DD-MM-YYYY") // Ng√†y v√†o l·ªõp
                ];

                // ‚úÖ G√°n tr·∫°ng th√°i ƒëi·ªÉm danh cho m·ªói ng√†y h·ªçc
                sessionHeaders.forEach(session => {
                    const attendance = attendanceRecords.find(
                        att => att.student_id === student.id && att.session_date === session.date
                    );
                    row.push(attendance ? attendance.status : ""); // Present, Absent, Late, Excused
                });

                row.push(""); // C·ªôt Note
                return row;
            });

            // ‚úÖ G·ªôp t·∫•t c·∫£ d·ªØ li·ªáu v√†o sheet
            const worksheetData = [...title, [], ...classInfoHeader, [], fullHeader, ...studentRows];
            const worksheet = XLSX.utils.aoa_to_sheet(worksheetData);
            const workbook = XLSX.utils.book_new();
            XLSX.utils.book_append_sheet(workbook, worksheet, "Attendance");

            // ‚úÖ Xu·∫•t file Excel
            XLSX.writeFile(workbook, `Attendance_Class_${classInfo.class_code}.xlsx`);
            message.success("Xu·∫•t file ƒëi·ªÉm danh th√†nh c√¥ng!");
        } catch (error) {
            console.error("L·ªói khi xu·∫•t file ƒëi·ªÉm danh:", error.response?.data || error);
            message.error("L·ªói khi xu·∫•t file ƒëi·ªÉm danh.");
        }
    };

    

    if (loading) return <p>ƒêang t·∫£i th√¥ng tin l·ªõp h·ªçc...</p>;

    return (
        <div style={{ padding: 20 }}>

            {/* üîπ Breadcrumb ho·∫∑c n√∫t Back */}
            <div style={{ marginBottom: 16 }}>
                <Breadcrumb>
                    <Breadcrumb.Item>
                        <Link to="/manager/classes">Qu·∫£n l√Ω l·ªõp h·ªçc</Link>
                    </Breadcrumb.Item>
                    <Breadcrumb.Item>{classInfo.class_code}</Breadcrumb.Item>
                </Breadcrumb>
            </div>

            {classInfo ? (
                <>
                    {/* Basic Info */}
                    <Card title="Basic Info" style={{ marginBottom: 20 }} extra={<Button onClick={() => setIsUpdateModalOpen(true)}>C·∫≠p nh·∫≠t</Button>}>
                        <div style={{ display: "flex", flexWrap: "wrap", justifyContent: "space-between" }}>
                            <div style={{ flex: "1 1 45%" }}>
                                <p><strong>M√£ l·ªõp:</strong> {classInfo.class_code}</p>
                                <p><strong>T√™n l·ªõp:</strong> {classInfo.name}</p>
                                <p><strong>M√¥n h·ªçc:</strong> {classInfo.subject}</p>
                                <p><strong>Gi·∫£ng vi√™n:</strong> {classInfo.teacher_name || "Ch∆∞a ph√¢n c√¥ng"}</p>
                                
                            </div>
                            <div style={{ flex: "1 1 45%" }}>
                                <p><strong>Tr·∫°ng th√°i:</strong> {classInfo.status}</p>
                                <p><strong>S·ªë l∆∞·ª£ng h·ªçc sinh:</strong> {students.length}</p>
                            </div>
                        </div>
                    </Card>

                    {/* Calendar Info */}
                    <Card title="Calendar Info" style={{ marginBottom: 20 }}>
                        <div style={{ display: "flex", flexWrap: "wrap", justifyContent: "space-between" }}>
                            <div style={{ flex: "1 1 45%" }}>
                                <p><strong>Ng√†y b·∫Øt ƒë·∫ßu:</strong> {moment(classInfo.start_date).format("DD-MM-YYYY")}</p>
                                <p><strong>Ng√†y k·∫øt th√∫c:</strong> {moment(classInfo.end_date).format("DD-MM-YYYY")}</p>
                                <p><strong>S·ªë gi·ªù h·ªçc m·ªói tu·∫ßn:</strong> 4 gi·ªù/tu·∫ßn</p>
                            </div>
                            <div style={{ flex: "1 1 45%" }}>
                                <p><strong>L·ªãch h·ªçc:</strong> {formatWeeklySchedule(classInfo.weekly_schedule)}</p>
                                <p><strong>S·ªë bu·ªïi h·ªçc:</strong> {classInfo.total_sessions}</p>
                            </div>
                        </div>
                    </Card>

                    <Tabs defaultActiveKey="1">
                        <TabPane tab="Danh s√°ch bu·ªïi h·ªçc" key="1">
                            <Button type="primary" onClick={exportAttendanceToExcel} style={{ marginBottom: 16 }}>
                                Xu·∫•t file ƒëi·ªÉm danh
                            </Button>
                            <Table
                                columns={[
                                    { title: "Bu·ªïi s·ªë", dataIndex: "session_number", key: "session_number" },
                                    { title: "M√£ bu·ªïi h·ªçc", dataIndex: "session_id", key: "session_id" },
                                    { title: "Ng√†y h·ªçc", dataIndex: "date", key: "date", render: (date) => moment(date).format("DD-MM-YYYY") },
                                    { title: "Th·ª©", dataIndex: "weekday", key: "weekday" },
                                    { title: "Gi·ªù b·∫Øt ƒë·∫ßu", dataIndex: "start_time", key: "start_time" },
                                    { title: "Gi·ªù k·∫øt th√∫c", dataIndex: "end_time", key: "end_time" },
                                    { title: "S·ªë h·ªçc sinh", dataIndex: "total_students", key: "total_students" },
                                    { title: "T·ªâ l·ªá ƒëi·ªÉm danh", dataIndex: "attendance_rate", key: "attendance_rate", render: (rate) => `${rate}%` },
                                    {
                                        title: "H√†nh ƒë·ªông",
                                        render: (_, record) => (
                                            <Button type="primary" onClick={() => openAttendanceModal(record)}>
                                                ƒêi·ªÉm danh
                                            </Button>
                                        ),
                                    },
                                ]}
                                dataSource={sessions}
                                rowKey="id"
                            />
                        </TabPane>
                        <TabPane tab="Danh s√°ch h·ªçc sinh" key="2">
                            <Button type="primary" onClick={() => { fetchAllStudents(); setIsEnrollModalOpen(true); }}>
                                Enroll h·ªçc sinh
                            </Button>
                            <Table
                                columns={[
                                    { title: "M√£ h·ªçc sinh", dataIndex: "id", key: "id" },
                                    { title: "H·ªç v√† T√™n", dataIndex: "full_name", key: "name", render: (text, record) => <Link to={`/manager/students/${record.id}`}>{text}</Link> },
                                    { title: "Ng√†y sinh", dataIndex: "dob", key: "dob", render: (dob) => moment(dob).format("DD-MM-YYYY") },
                                    { title: "Email", dataIndex: "email", key: "email" },
                                    { title: "S·ªë ƒëi·ªán tho·∫°i", dataIndex: "phone_number", key: "phone" },
                                ]}
                                dataSource={students}
                                rowKey="id"
                            />
                        </TabPane>
                    </Tabs>
                </>
            ) : (
                <p>Kh√¥ng t√¨m th·∫•y l·ªõp h·ªçc.</p>
            )}

            {/* Modal c·∫≠p nh·∫≠t th√¥ng tin l·ªõp */}
            <Modal title="C·∫≠p nh·∫≠t th√¥ng tin l·ªõp" open={isUpdateModalOpen} onOk={handleUpdateClass} onCancel={() => setIsUpdateModalOpen(false)}>
                <Form form={form} layout="vertical" initialValues={classInfo}>
                    <Form.Item label="T√™n l·ªõp" name="name" rules={[{ required: true, message: "Vui l√≤ng nh·∫≠p t√™n l·ªõp!" }]}>
                        <Input />
                    </Form.Item>
                    <Form.Item label="M√¥ t·∫£" name="description">
                        <Input.TextArea />
                    </Form.Item>
                </Form>
            </Modal>

            {/* Modal Enroll h·ªçc sinh */}
            <Modal title="Enroll h·ªçc sinh v√†o l·ªõp" open={isEnrollModalOpen} onCancel={() => setIsEnrollModalOpen(false)} footer={null}>
                <Input placeholder="T√¨m ki·∫øm h·ªçc sinh..." onChange={(e) => setSearchTerm(e.target.value.toLowerCase())} />
                <Table
                    columns={[
                        { title: "T√™n h·ªçc sinh", dataIndex: "full_name", key: "name" },
                        { title: "Email", dataIndex: "email", key: "email" },
                        { title: "H√†nh ƒë·ªông", render: (_, record) => <Button onClick={() => handleEnrollStudent(record.id)}>Enroll</Button> },
                    ]}
                    dataSource={allStudents.filter((s) => s.full_name.toLowerCase().includes(searchTerm))}
                    rowKey="id"
                />
            </Modal>

            <Modal
                title="ƒêi·ªÉm danh bu·ªïi h·ªçc"
                open={isAttendanceModalOpen}
                onOk={submitAttendance}
                onCancel={() => setIsAttendanceModalOpen(false)}
                footer={[
                    <Button key="faceid" type="primary" onClick={() => navigate(`/face-attendance?classId=${id}&sessionDate=${currentSession?.date}`)}>
                      ƒêi·ªÉm danh FaceID
                    </Button>,
                    <Button key="manual" type="primary" onClick={submitAttendance}>
                      L∆∞u ƒëi·ªÉm danh th·ªß c√¥ng
                    </Button>,
                    <Button key="cancel" onClick={() => setIsAttendanceModalOpen(false)}>
                      H·ªßy
                    </Button>,
                  ]}
            >
                <Table
                    columns={[
                        { title: "M√£ h·ªçc sinh", dataIndex: "id", key: "id" },
                        { title: "H·ªç v√† T√™n", dataIndex: "full_name", key: "name" },
                        {
                            title: "ƒêi·ªÉm danh",
                            render: (_, record) => (
                                <Switch
                                    checked={attendanceData[record.id] === "Present"}
                                    onChange={(checked) => handleAttendanceChange(record.id, checked)}
                                />
                            ),
                        },
                    ]}
                    dataSource={currentSession?.students || students}
                    rowKey="id"
                />
            </Modal>
        </div>
    );
};

export default ClassDetail;
